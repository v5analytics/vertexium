package org.vertexium.serializer.kryo;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.vertexium.test.VertexiumSerializerTestBase;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class QuickKryoVertexiumSerializerTest extends VertexiumSerializerTestBase {
    private final boolean compress;
    private QuickKryoVertexiumSerializer vertexiumSerializer;

    @Parameterized.Parameters(name = "compress={0}")
    public static Iterable<Object[]> initialVisibilitySources() {
        return Arrays.asList(new Object[][]{
            {true}, {false}
        });
    }

    public QuickKryoVertexiumSerializerTest(boolean compress) {
        this.compress = compress;
    }

    @Before
    public void before() {
        vertexiumSerializer = new QuickKryoVertexiumSerializer(compress);
    }

    @Test
    public void testCompress() {
        String testString = "This is a test value";
        QuickKryoVertexiumSerializer serializer = new QuickKryoVertexiumSerializer(true);
        byte[] bytes = serializer.objectToBytes(testString);
        Object str = serializer.bytesToObject(bytes);
        assertEquals(testString, str);
    }

    @Override
    protected byte[] getPropertyValueBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 24, -47, 12, 42, 40, -54, 47, 0, 114, 42, -11, 2, -96, -116, -80,
                -60, -100, -46, -89, -116, -116, -116, -82, 126, 71, 0, -122, 86, 45, 29
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, 1, 1, 111, 114,
                103, 46, 118, 101, 114, 116, 101, 120, 105, 117, 109, 46, 112, 114, 111, 112,
                101, 114, 116, 121, 46, 80, 114, 111, 112, 101, 114, 116, 121, 86, 97, 108,
                117, -27, 1, 1, 1, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getStreamingPropertyValueBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 24, -47, 12, 42, 40, -54, 47, 0, 114, 42, -11, 92, 82, -45, 18,
                75, 115, 74, -126, 75, -118, 82, 19, 115, 51, -13, -46, 3, -96, 18, 97,
                -119, 57, -91, 79, 25, 25, 89, 24, 32, -128, 17, 8, -104, -94, 15, 49,
                -72, -6, 29, 1, 0, -117, -29, 52, -78
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, 1, 1, 111, 114,
                103, 46, 118, 101, 114, 116, 101, 120, 105, 117, 109, 46, 112, 114, 111, 112,
                101, 114, 116, 121, 46, 68, 101, 102, 97, 117, 108, 116, 83, 116, 114, 101,
                97, 109, 105, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, 86, 97, 108,
                117, -27, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
                2, 91, -62, 0, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getStreamingPropertyValueRefBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 24, 25, -49, -110, 106, 20, -120, 17, 92, 82, -108, -102, -104, -101, -103,
                -105, 30, 80, -108, 95, 0, 84, 91, 25, -106, -104, 83, -102, 26, -108, -102,
                -58, -56, -56, 24, 125, -56, -43, -17, 8, 0, -41, -34, 62, 76
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, 1, 1, -51, 1,
                111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105, 117, 109, 46, 116, 101,
                115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117, 109, 83, 101, 114, 105,
                97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66, 97, 115, 101, 36, 84,
                101, 115, 116, 83, 116, 114, 101, 97, 109, 105, 110, 103, 80, 114, 111, 112,
                101, 114, 116, 121, 86, 97, 108, 117, 101, 82, 101, 102, 1, 1, 1, 91,
                -62, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoPointBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 94, -77, 51, 50, -58, -12, 31, -6, -86, -95, -29, -24, -32, -98, -102,
                -81, 80, -112, -97, -103, 87, -94, 80, -98, 89, -110, -95, -112, -110, 90, -100,
                92, -108, 89, 80, -110, -103, -1, -18, -23, 5, -91, -37, 63, -19, 52, 28,
                -90, 57, 119, -25, 60, -73, 54, 119, 112, -11, 59, 2, 0, 33, -70, 52,
                -96
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -21, 7, 1, 1,
                92, -113, -62, -11, 40, 44, 65, 64, 71, 101, 111, 32, 112, 111, 105, 110,
                116, 32, 119, 105, 116, 104, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105,
                111, -18, -27, -48, 34, -37, -7, 62, 40, 64, -106, 67, -117, 108, -25, 59,
                55, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoPointWithAccuracyBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, -66, -77, 51, 50, -66, -85, -79, 55, -115, -37, -27, -26, -64, 24, -45,
                127, -24, -85, -122, -114, -93, -125, 123, 106, -66, 66, 65, 126, 102, 94, -119,
                66, 121, 102, 73, -122, 66, 98, 114, 114, 105, 81, 98, 114, -91, 66, 98,
                94, -118, 66, 74, 106, 113, 114, 81, 102, 65, 73, 102, -2, -69, -89, 23,
                -108, 110, -1, -76, -45, 112, -104, -26, -36, -99, -13, -36, -38, -36, -63, -43,
                -17, 8, 0, -48, 87, 60, -25
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -9, 7, 1, 1,
                -18, 124, 63, 53, 94, -70, 70, 64, 1, 92, -113, -62, -11, 40, 44, 65,
                64, 71, 101, 111, 32, 112, 111, 105, 110, 116, 32, 119, 105, 116, 104, 32,
                97, 99, 99, 117, 114, 97, 99, 121, 32, 97, 110, 100, 32, 100, 101, 115,
                99, 114, 105, 112, 116, 105, 111, -18, -27, -48, 34, -37, -7, 62, 40, 64,
                -106, 67, -117, 108, -25, 59, 55, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoCircleBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 62, -78, 51, -70, -89, -26, 43, 36, 103, 22, 37, -25, -92, 42, -108,
                103, -106, 100, 40, -92, -92, 22, 39, 23, 101, 22, -108, 100, -26, -65, 123,
                122, 65, -23, -10, 79, 59, 13, -121, 105, -50, -35, 57, -49, -83, -51, 29,
                98, -6, 15, 125, -43, -48, 113, 116, 112, -11, 59, 2, 0, 50, -3, 52,
                -19
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -15, 7, 1, 71,
                101, 111, 32, 99, 105, 114, 99, 108, 101, 32, 119, 105, 116, 104, 32, 100,
                101, 115, 99, 114, 105, 112, 116, 105, 111, -18, -27, -48, 34, -37, -7, 62,
                40, 64, -106, 67, -117, 108, -25, 59, 55, 64, 92, -113, -62, -11, 40, 44,
                65, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoRectBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 62, -80, 51, -70, -89, -26, 43, 20, 1, 5, 20, -54, 51, 75, 50,
                20, 82, 82, -117, -109, -117, 50, 11, 74, 50, -13, -33, -67, 102, 103, 100,
                104, 120, 122, 65, -23, -10, 79, 59, 13, -121, 105, -50, -35, 57, -49, -83,
                -51, 29, -64, -126, 49, -3, -121, -66, 106, -24, 56, 58, -68, -85, -79, 55,
                -115, -37, -27, -26, -32, -22, 119, 4, 0, -108, -43, 58, -118
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -16, 7, 1, 71,
                101, 111, 32, 114, 101, 99, 116, 32, 119, 105, 116, 104, 32, 100, 101, 115,
                99, 114, 105, 112, 116, 105, 111, -18, -21, 7, 1, 0, -128, -27, -48, 34,
                -37, -7, 62, 40, 64, -106, 67, -117, 108, -25, 59, 55, 64, -21, 7, 1,
                0, -128, 92, -113, -62, -11, 40, 44, 65, 64, -18, 124, 63, 53, 94, -70,
                70, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoLineBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, -66, -80, 51, -70, -89, -26, 43, -28, 100, -26, -91, 42, -108, 103, -106,
                100, 40, -92, -92, 22, 39, 23, 101, 22, -108, 100, -26, -65, 99, 100, -52,
                74, 44, 75, -44, 43, 45, -55, -52, -47, 115, 44, 42, 74, -84, -12, -55,
                44, -2, -62, -56, -12, -102, -99, -111, -95, -31, -23, 5, -91, -37, 63, -19,
                52, 28, -90, 57, 119, -25, 60, -73, 54, 119, 0, 11, -58, -12, 31, -6,
                -86, -95, -29, -24, -16, -82, -58, -34, 52, 110, -105, -101, -125, -85, -33, 17,
                0, -34, 85, 66, 100
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -12, 7, 1, 71,
                101, 111, 32, 108, 105, 110, 101, 32, 119, 105, 116, 104, 32, 100, 101, 115,
                99, 114, 105, 112, 116, 105, 111, -18, 1, 1, 106, 97, 118, 97, 46, 117,
                116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, -12, 1, 2, -21,
                7, 1, 0, -128, -27, -48, 34, -37, -7, 62, 40, 64, -106, 67, -117, 108,
                -25, 59, 55, 64, -21, 7, 1, 0, -128, 92, -113, -62, -11, 40, 44, 65,
                64, -18, 124, 63, 53, 94, -70, 70, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoHashBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 24, -47, 13, -86, 44, 72, -43, 115, 79, -51, -9, 72, 44, 126, -63,
                8, -92, 21, 50, 18, -117, 51, 20, -54, 51, 75, 50, 20, 82, 82, -117,
                -109, -117, 50, 11, 74, 50, -13, -33, 21, -89, 24, 20, 39, -107, 87, -26,
                86, -104, 85, 126, 112, -11, 59, 2, 0, 99, 79, 55, -28
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, 1, 1, 111, 114,
                103, 46, 118, 101, 114, 116, 101, 120, 105, 117, 109, 46, 116, 121, 112, 101,
                46, 71, 101, 111, 72, 97, 115, -24, 1, 71, 101, 111, 32, 104, 97, 115,
                104, 32, 119, 105, 116, 104, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105,
                111, -18, 115, 100, 48, 115, 98, 119, 121, 109, 120, 54, 121, -16, 69, 78,
                -60
            };
        }
    }

    @Override
    protected byte[] getGeoCollectionBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, 62, -77, 51, -70, -89, -26, 43, 36, -25, -25, -28, 0, -59, 50, -13,
                -13, 20, -54, 51, 75, 50, 20, 82, 82, -117, -109, -117, 50, 11, -128, 2,
                -17, 24, 25, -77, 18, -53, 18, -11, 74, 75, 50, 115, -12, 28, -117, -118,
                18, 43, 125, 50, -117, -65, 48, 50, -67, 102, 103, 100, 104, 120, 122, 65,
                -23, -10, 79, 59, 13, -121, 105, -50, -35, 57, -49, -83, -51, 29, -64, -126,
                49, -3, -121, -66, 106, -24, 56, 58, -68, -85, -79, 55, -115, -37, -27, -26,
                -32, -22, 119, 4, 0, 127, 118, 68, -25
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -13, 7, 1, 71,
                101, 111, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 32, 119, 105,
                116, 104, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, -18, 1, 1,
                106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76,
                105, 115, -12, 1, 2, -21, 7, 1, 0, -128, -27, -48, 34, -37, -7, 62,
                40, 64, -106, 67, -117, 108, -25, 59, 55, 64, -21, 7, 1, 0, -128, 92,
                -113, -62, -11, 40, 44, 65, 64, -18, 124, 63, 53, 94, -70, 70, 64, 69,
                78, -60
            };
        }
    }

    @Override
    protected byte[] getGeoPolygonBytes() {
        if (compress) {
            return new byte[]{
                120, -38, 99, 96, 100, 56, -60, -104, 95, -108, -82, 87, -106, 90, 84, -110,
                90, -111, 89, -102, -85, 87, -110, 90, 92, -94, 23, 6, -29, 6, -89, 22,
                101, 38, -26, 100, 86, -91, 22, -123, 0, -59, -99, 18, -117, 83, 85, 96,
                66, -119, 73, 57, -87, -2, 73, 89, -87, -55, 37, -116, -63, 33, -114, 65,
                87, -66, -78, 51, -70, -89, -26, 43, 36, -25, -25, -28, 0, -59, 50, -13,
                -13, 20, -54, 51, 75, 50, 20, 82, 82, -117, -109, -117, 50, 11, -128, 2,
                -17, 24, 25, -77, 18, -53, 18, -11, 74, 75, 50, 115, -12, 28, -117, -118,
                18, 43, 125, 50, -117, -65, 48, 50, 49, 50, 50, -78, -68, 102, 103, 100,
                104, -72, -88, 116, -5, 103, -35, -90, 96, 7, -51, -104, -2, 67, 95, 43,
                -62, 28, -64, -126, 9, 79, 47, 40, -35, -50, 12, 112, -48, -65, -85, -62,
                -42, -24, -22, 13, 17, -100, -9, 126, -7, 49, -17, -19, -82, 14, 60, 76,
                -38, -19, 98, -102, 14, 14, 88, -75, -61, -51, -3, -90, 1, 20, 49, 53,
                117, 0, -86, -67, 121, -50, 92, 5, -94, -6, -45, 37, -33, 36, -127, 31,
                -95, 16, -43, 6, -63, 120, 44, 67, -41, 14, 55, 23, -92, -8, -89, -99,
                -122, -61, 52, -25, -18, -100, -25, -42, -26, 16, -43, 32, -29, 52, 116, 28,
                29, -34, -43, -40, -101, -58, -19, 114, -125, 8, -42, 103, -19, 41, -103, -20,
                -31, -29, -64, -79, 70, 38, 42, -27, 117, -128, 3, 86, -19, -82, 126, 71,
                0, 34, -15, -102, 69
            };
        } else {
            return new byte[]{
                0, 1, 0, -62, 1, 111, 114, 103, 46, 118, 101, 114, 116, 101, 120, 105,
                117, 109, 46, 116, 101, 115, 116, 46, 86, 101, 114, 116, 101, 120, 105, 117,
                109, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 84, 101, 115, 116, 66,
                97, 115, 101, 36, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101,
                79, 98, 106, 101, 99, 116, 1, 83, 84, 65, 82, -44, -11, 7, 1, 71,
                101, 111, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 32, 119, 105,
                116, 104, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, -18, 1, 1,
                106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76,
                105, 115, -12, 1, 2, 1, 1, 1, 4, -21, 7, 1, 0, -128, -47, 34,
                -37, -7, 126, -78, 83, 64, 41, 92, -113, -62, -11, 120, 86, 64, -21, 7,
                1, 0, -128, 96, -27, -48, 34, -37, 105, 80, 64, 47, -35, 36, 6, -127,
                69, 75, 64, -21, 7, 1, 0, -128, -98, -17, -89, -58, 75, -73, 69, 64,
                12, 2, 43, -121, 22, 41, 64, 64, -21, 7, 1, 0, -128, -47, 34, -37,
                -7, 126, -78, 83, 64, 41, 92, -113, -62, -11, 120, 86, 64, 1, 1, 1,
                4, -21, 7, 1, 0, -128, -10, 40, 92, -113, -62, 53, 53, 64, 43, -121,
                22, -39, -50, 55, 36, 64, -21, 7, 1, 0, -128, -14, -46, 77, 98, 16,
                -8, 85, 64, 41, 92, -113, -62, -11, 48, 83, 64, -21, 7, 1, 0, -128,
                96, -27, -48, 34, -37, 105, 80, 64, 47, -35, 36, 6, -127, 69, 75, 64,
                -21, 7, 1, 0, -128, -10, 40, 92, -113, -62, 53, 53, 64, 43, -121, 22,
                -39, -50, 55, 36, 64, 1, 1, 1, 4, -21, 7, 1, 0, -128, -27, -48,
                34, -37, -7, 62, 40, 64, -106, 67, -117, 108, -25, 59, 55, 64, -21, 7,
                1, 0, -128, 92, -113, -62, -11, 40, 44, 65, 64, -18, 124, 63, 53, 94,
                -70, 70, 64, -21, 7, 1, 0, -128, 127, 106, -68, 116, -109, 72, 76, 64,
                8, -84, 28, 90, 100, -21, 80, 64, -21, 7, 1, 0, -128, -27, -48, 34,
                -37, -7, 62, 40, 64, -106, 67, -117, 108, -25, 59, 55, 64, 69, 78, -60
            };
        }
    }

    @Override
    protected QuickKryoVertexiumSerializer getVertexiumSerializer() {
        return vertexiumSerializer;
    }
}